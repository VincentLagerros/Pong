local path = sys.get_save_file("pong", "u1")
local y1 = sys.get_save_file("pong", "y1")
local y2 = sys.get_save_file("pong", "y2")
local b = sys.get_save_file("pong", "b")

function final(self)
	self.data.v = nil
	sys.save(sys.get_save_file("pong", "u1"), self.data)
end

local function ex(self)
	self.data.v = nil
	sys.save(sys.get_save_file("pong", "u1"), self.data)
	os.exit()
end

local function save(self)
	sys.save(sys.get_save_file("pong", "u1"), self.data)
end
local function si(self)
	if self.data.v == nil then self.data.v = 1 end
	self.data.v = self.data.v + 1
	sys.save(sys.get_save_file("pong", "u1"), self.data)
end

local function go(self)
	local s = 5
	local b = {}
	b.go = 1
	b.x = self.sx/2
	b.y = self.sy/2
	local rot = (math.random(45,135))*(math.random(0,1)*2 - 1)
	b.gy = math.sin(rot)*s
	b.gx = math.cos(rot)*s
	sys.save(sys.get_save_file("pong", "b"), b)
end

local function gb(self)
	return sys.load(b)
end

local function gy1(self)
	return sys.load(y1).y
end
local function gy2(self)
	return sys.load(y2).y
end


local function mb(self)
	local gb =  gb(self)
	local y = gb.y
	local x = gb.x
	x = x + gb.gx
	y = y + gb.gy
	
	local b = {}
	b.go = 1
	b.x = x
	b.y = y
	b.gy = gb.gy
	b.gx = gb.gx
	if b.y < 0 or b.y > self.sy then b.gy = -b.gy end
	
	local w = 25
	local h = 150
	local p1 = gy1(self)
	local p2 = gy2(self)
	--b.y < p2 and 
	if b.gx < 0 and b.y < p1 + h and b.y > p1 - 50 then 
		if b.x < w then b.gx = -b.gx print(b.y, p1) end
	end 
	if b.gx > 0 and b.y < p2 + h and b.y > p2 - 50 then 
		if b.x > self.sx - (w + 50) then b.gx = -b.gx print(b.y, p2) end
	end
	if b.x < -10 or b.x > self.sx - 40 then ex(self) end 
	sys.save(sys.get_save_file("pong", "b"), b)
end


local function sy1(self, val)
	self.d = {}
	self.d.y = val
	local h = 150
	
	if self.d.y < 0 then self.d.y = 0 end
	if self.d.y > self.sy - h then self.d.y = self.sy - h end
	sys.save(sys.get_save_file("pong", "y1"), self.d)
end
local function sy2(self, val)
	self.d = {}
	self.d.y = val
	local h = 150
	
	if self.d.y < 0 then self.d.y = 0 end
	if self.d.y > self.sy - h then self.d.y = self.sy - h end
	sys.save(sys.get_save_file("pong", "y2"), self.d)
end

function window_callback(self, event, data)
	if event == window.WINDOW_EVENT_RESIZED and self.sx == nil then
		self.sx = data.width
		self.sy = data.height
	end
end

function init(self)
	
	math.randomseed(socket.gettime())
	local test = math.random(1,100)
	if gy1(self) == nil then self.y1 = 0 sy1(self, 0) end
	if gy2(self) == nil then self.y2 = 0 sy2(self, 0) end
	window.set_listener(window_callback)
	self.v = 0 
	self.data = sys.load(path)
	if self.data.v == 1 or self.data.v == nil then self.v = 1 si(self)
	elseif self.data.v == 2 then self.v = 2 si(self)
	elseif self.data.v == 3 then self.v = 3 si(self)
	elseif self.data.v == 4 then ex(self) end
	print(self.v)
		
	msg.post(".", "acquire_input_focus")

	self.y = 0
	self.y1 = gy1(self)
	self.y2 = gy2(self)
	self.x = 0 
	
	defos.set_fullscreen(true)
	if self.v == 3 then go(self) end
	
	--local error = string.char(defos.get_window_size())
end


function update(self, dt)
	local h = 150
	local w = 25
	if self.v == 1 then self.x = 0 self.y = gy1(self) end
	if self.v == 2 then self.x = self.sx - w self.y = gy2(self) end
	if self.v == 3 then h = 50 w = 50 
		
		self.y = gb(self).y
		self.x = gb(self).x
		mb(self)
	end
	if self.v < 3 then 
		if self.y < 0 then self.y = 0 end
		if self.y > self.sy - h then self.y = self.sy - h end
	end
	defos.set_view_size(self.x, self.y, w, h)
	defos.disable_maximize_button()
	defos.disable_minimize_button()
	defos.disable_window_resize()
	defos.set_window_title("")
	self.data = sys.load(path)
	if self.data.v == nil then ex(self) end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	local speed = 15
	if self.y1 < 0 then self.y1 = 0 end
	if self.y1 > self.sy then self.y1 = self.sy end
	if self.y2 < 0 then self.y2 = 0 end
	if self.y2 > self.sy then self.y2 = self.sy end
	if action_id == hash("w") then self.y1 = self.y1 - speed sy1(self, self.y1) end
	if action_id == hash("s") then self.y1 = self.y1 + speed sy1(self, self.y1) end
	if action_id == hash("up") then self.y2 = self.y2 - speed sy2(self, self.y2) end
	if action_id == hash("down") then self.y2 = self.y2 + speed sy2(self, self.y2) end
	if action_id == hash("start") then go(self) end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
